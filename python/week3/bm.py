"""
이 퀴즈와 관련해서 면접때 어떻게 물어보는지 팁을 좀 드리겠습니다.
문자열의 부분문자열 위치 찾는 문제, 구술 면접때 많이 물어봅니다.
면접관은 이 문제 하나로 많은 것을 파악할수 있습니다.
질문1) 문자열내에 부분문자열 위치를 찾는 함수를 알고 있나요?
답변1)
자바스크립트/자바: indexOf
파이썬: find
c/c++: ...
질문2) 그러면 해당 기능을 수행하는 함수를 칠판에 pseudo코딩 해보세요 (5-10분)
답변2)
(5-10분이라서 복잡하지 않고, 돌아갈수 있는 구현을 주로 합니다)
완전탐색 -> 2중 for문 사용 (이렇게 많이들 답변합니다)
def find(txt, pat):
    for i in range(len(txt) - len(pat) + 1):
        for j in range(len(pat)):
            if txt[i+j] != pat[j]:
                break
        else:
            return i
    return -1
질문3) 판서한 알고리즘을 설명하고, 시간 복잡도가 어떻게 되는지 말해주세요
답변4) ...설명...
질문5) 더 개선할 방법은 없나요?
 답변5) 매칭이 안될때. 한개씩 밀지않고 여러개 밀면 성능을 개선할수 있겠음
질문6) 그렇게 pseudo 코딩해보세요
 답변6) ...손코딩...
질문7) 여기서 더 개선할게 없을까요 (skip테이블을 사용안한 경우)
 답변7)
-같은 문자에 대해서 skip위치를 중복적으로 찾음
-한번 찾아서 테이블로 저장해서 재사용하면 성능개선되겠음
질문8) 이것과 관련된 알고리즘을 알고있는게 있나요?
답변8)
-kmp, 보이어무어, ...
-...대강의 설명... 또는 “이런게 있는것을 알고 있다“...
질문9) 이것을 어떤 곳에 활용할수 있을까요?
답변9)
-dna 염기패턴 검출
-검색엔진 단어검색/색인
-보안 이상징후 트래픽 매칭, ...
면접관 입장에서는 위의 질문으로 다음의 내용을 파악하게 됩니다.
1) 손코딩 -> 온라인 코딩테스트를 진짜 본인이 했는지 여부
  (의외로 온라인 대리 시험 있습니다. 말은 잘하는데, 손코딩 전혀 못합니다)
2) 5-10분 -> 제한된 시간내 문제해결 능력이 있는지
3) 판서 내용 설명 -> 커뮤니케이션 능력 (정확하게 표현하고 전달하는지)
4) 판서설명 + 개선포인트 답변 -> 아는것과 부족한 부분을 정확하게 인지
5) 관련 알고리즘 답변 -> 업무가 주어지면, 문제의 범주를 파악하고 탐색해나가는 능력(가능성)
6) 응용분야 답변 -> 단순 시험공부용 암기가 아니라, 왜 필요한지 적극적으로 고민하고 탐구하는지
짧은 시간이므로 처음 손코딩은 브루트포스도 괜찮습니다.
면접관이 질문하면, 계속 시간을 받아서 조금씩 개선된 코드나 설명을 보여주면
이것 또한 중요 가산점이 됩니다.
자료구조/알고리즘 문제를 풀면서 이해가 중요하다고 말씀드리는 것은
위의 상황에서 알고있는 것을 잘 설명할수 있는 능력이 필요하기 때문입니다.
"""

def bm_match(txt: str, pat: str) -> int:
    skip = [None] * 26

    for pt in range(26):
        skip[pt] = len(pat)
    
    for pt in range(len(pat) - 1):
        skip[ord(pat[pt]) - ord('A')] = len(pat) - pt - 1
    
    pt = len(pat) - 1
    while pt < len(txt):
        pp = len(pat) - 1
        while txt[pt] == pat[pp]:
            if pp == 0:
                return pt
            pt -= 1
            pp -= 1
        pt += skip[ord(txt[pt]) - ord('A')] if skip[ord(txt[pt]) - ord('A')] > len(pat) - pp \
            else len(pat) - pp
    

    return -1

if __name__ == '__main__':
    s1 = input('텍스트를 입력하세요:')
    s2 = input('패턴을 입력하세요:')

    idx = bm_match(s1, s2)

    if idx == -1:
        print('텍스트 안에 패턴이 존재하지 않습니다.')
    else:
        print(f'{idx + 1}번째 문자가 일치합니다.')

#string : EAACCAAC
#pattern : CAAC